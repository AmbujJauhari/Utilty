import java.io.*;
import java.util.*;
import java.lang.*;

class CharTrie {
    private Node root;
    
    public CharTrie() {
        root = new Node(' ');
    }
    
    public void insertString(String str) {
        Node currentNode = root;
        
        for(int i=0; i < str.length(); i++) {
            char ch = str.charAt(i);
            Node matchingChildNode = currentNode.identifyMatchingNode(ch);
            if(matchingChildNode != null) {
                currentNode = matchingChildNode;
            } else {
                Node nd = new Node(ch);
                if(i == str.length()-1) {
                    nd.isLastCharInWord = true;
                }
                currentNode.leafs.add(nd);
                currentNode = currentNode.identifyMatchingNode(ch);
            }
        }
    }
    
    public void search(char[] arr) {
        Queue<Node> queue = new LinkedList<Node>();
        queue.add(root);
        
        int counter = 0;
        String foundStr = "";
        while(!queue.isEmpty()) {
            
            Node node = queue.poll();
            System.out.println("Processing node " + node);
            if(node.data == arr[counter]) {
                queue.add(node);
                foundStr = foundStr + node.data;
                if(node.isLastCharInWord) {
                    System.out.println(foundStr);
                    foundStr = "";
                }
            } 
        }
    }
    
    public static void main(String[] args) {
        CharTrie ct = new CharTrie();
        ct.insertString("go");
        ct.insertString("bat");
        ct.insertString("me");
        ct.insertString("eat");
        ct.insertString("goal");
        ct.insertString("boy");
        ct.insertString("run");
        
        char[] arr = {'e','o','b', 'a','m','g', 'l'};
        
        ct.search(arr);
    }
}

class Node {
    char data;
    LinkedList<Node> leafs;
    boolean isLastCharInWord;
    
    public Node(char c) {
        leafs = new LinkedList<Node>();
        data = c;
        isLastCharInWord = false;
    }
    
    public Node identifyMatchingNode(char lookup) {
        if(leafs != null) {
            for(Node node:leafs) {
                if(node.data == lookup) {
                    return node;
                }
            }
        }
        
        return null;
    }
    
    public String toString() {
        String str = "DATA = " + data + " Leafs = ";
        
        for(Node n: leafs) {
            str = str + " " + n.toString();
        }
        
        str = str + " isLastCharInWord = " + isLastCharInWord;
        
        return str;
    }
}
